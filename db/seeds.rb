# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rails db:seed command (or created alongside the database with db:setup).
#
# Examples:
#
#   movies = Movie.create([{ name: 'Star Wars' }, { name: 'Lord of the Rings' }])
#   Character.create(name: 'Luke', movie: movies.first)
ft = Proejct.create(title: "Frontend Template", tag_line: "A custom template created with HTML, CSS, and Javascript", description: "<p>This a working example of a front end template that I created for a client. All of the client's photos and product images have been changed. The logo and name of the business have also been changed.</p><p>The product images are pictures from Bloomingdales.com, the logo and name of the business were made up (any similarity to a real business is completely coincidental.) The other photo assets (including header images, etc.) are from either pexels.com or stocksnap.io.</p><p>This application is intended to showcase the html, css, and javascript used to create the components of the front end template: as such, there is no backend functionality. All products, categories, and sub-categories have been manually loaded into the layout.</p><p>A note on links -- all of the main navigation categories will link to the dresses category page. All of the sub-category links from the categories page will link to 'casual dresses'. All of the sub-category products will link to the same product page.</p><p>The 'my list' modal is pre-populated with 'saved' items. Since these items are manually loaded in the template, the 'clear my list' button does not work. Likewise, there is no email functionality set up on the backend. The keyboard works and users may type into the text area using it, but no emails will be sent.</p><p>The design of the template is not my own. The site was designed by my client and I created the HTML, CSS, and JS to achieve the design as specified. The design was originally intended for large appliances; consequently, some design elements may seem off or unnecessary for clothing products.</p>", url: "https://frontend-template-example.herokuapp.com/pages/product_detail", photo: "http://i.imgur.com/86CZxTa.png", client: "Confidential", completed: "October 2016")

keyboard = Project.create(title: "On-Screen Keyboard", tag_line: "An HTML, CSS, and JavaScript on-screen keyboard." description: "<p>This on-screen keyboard was created as part of a client project. The client provided design had a specific keyboard design. While my initial instict was to use a keyboard plug-in, after looking at several options, I realized that customizing a plug-in would be as time-consuming as creating one from scratch.</p><p>The keyboard is created and styled using custom HTML and CSS. JQuery is used to select the correct button and add/delete the character to/from the write field.</p><p>The keyboard rows are created using flex-boxes and flex-items.</p><p>To view a blog post that I wrote about this keyboard, please click <a href='http://rubyisshiny.tumblr.com/post/152544576281/on-screen-keyboard-with-html-css-and-jquery' target='_blank'>HERE</a></p>", url: "https://keyboard-example.herokuapp.com/", photo: "http://i.imgur.com/T6AlAmt.png", client: "Confidential", completed: "October 2016")

ay = Project.create(title: "AF Yoga", tag_line: "Inhale the future, exhale the past", description: "<p>AF Yoga believes that yoga is for everybody and every body.</p> <p>AF Yoga was developed using Ruby on Rails (Rails 5) and the MVC design pattern.</p> <p>Relationships are designed using Active Record and use a Postgresql database.</p> <p>Bootstrap is utilized and customized for UI/UX design.</p>", url: "http://www.afyoga.com", photo: "http://i.imgur.com/dfKP5uu.png", client: "AF Yoga", completed: "In progress")

se = Project.create(title: "Social Eats", tag_line: "The best Rails app for creating food events with friends!", description: "<p>Have you ever been new to corporation and been unable to find the great lunch spots? Do your co-workers constantly come back from lunch at restaurants you wish you'd known about?</p> <p><strong>SocialEats</strong> is here to help!</p> <p>SocialEats was developed to answer the question: where is everyone going for lunch? Developed as a group project at the Flatiron School, Social Eats is built using Ruby on Rails and the MVC design pattern.</p> <p>JQuery and Javascript are used for AJAX functionality to provide a seamless user experience.</p> <p>The Yelp API is used for the event location search function and the Geocoder gem grabs the user's location when one is not provided.</p> <p>Rails 5 is implemented and used with Action Cable and Redis for real-time chat function on events pages.</p> <p>Relationships are designed with Active Record and use a Postgresql database.</p>", url: "https://social-eats.herokuapp.com", photo: "http://i.imgur.com/x242xO1.png", client: "Student Project at the Flatiron School", completed: "May 2016")

fs = Project.create(title: "Flip/Side", tag_line: "The most helpful decision making Rails app!", description: "<p>How do you make decisions? Do you have endless scraps of paper with pros and cons lists?</p> <p>Enter <strong>Flip/Side!</strong></p> <p>Flip/Side is designed to make the decision-making process easier for users. Users can make new issues, public or private, and assign pros and cons to each issue. Users also assign weights to the pros and cons. The app then offers a suggestion of whether or not the issue looks positive (you should do it) or negative (you probably shouldn't do it).</p> <p>The application was developed using Ruby on Rails and the MVC design pattern and uses a custom decorator to wrap view logic.</p> <p>JQuery and JavaScript are utilized for AJAX functionality and a seamless user experience.  BCrypt gem provides custom user authentication and security.</p> <p>Test framework built with RSPEC, Capybara, and Selenium.</p> <p>Designed relationships with Active Record and used a Postgresql database.</p>", url: "https://flip-side.herokuapp.com", photo: "http://i.imgur.com/hTqBEan.png", client: "Student Project at the Flatiron School", completed: "June 2016")

e = Project.create(title: "Elevate", tag_line: "A beautiful goal-tracking Ember App with custom Rails API!", description: "<p>What is the best way to achieve your goals? Track them!</p> <p><strong>Elevate</strong> is here to help you keep track of your goals and the action items to complete those goals.</p> <p>Elevate was built with customer Rails API backend, using the rails-api gem, Active Model Serializers, and the JSON API Adapter.</p> <p>JWT Ruby gem for custom JWT authorization and security; customer authorization flow on client side application using Ember Simple Auth and JWT.</p> <p>Ember.js frontend designed with Bootstrap and custom HTML/CSS.</p> <p>Wrote custom functions to randomize background image and quotes upon page refresh.</p> <p>Utilized Ember.js for seamless user experience and application page transitions.<p>", url: "https://elevate-life.herokuapp.com", photo: "http://i.imgur.com/votR64N.png", client: "Student Project at the Flatiron School", completed: "June 2016")
